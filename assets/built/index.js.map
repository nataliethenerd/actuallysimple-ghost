{"version":3,"file":"index.js","sources":["../js/infiniteScroll.js","../js/menuOpen.js","../js/index.js"],"sourcesContent":["/*\nThis script continously loads post as the user scrolls the page. It uses the IntersectionObserver API to detect when the last post is in view. When the last post is in view, it fetches the next page and appends the posts to the page. It then checks if there is a next page and if there is, it continues to observe the last post. If there is no next page, it disconnects the observer. \n\nImportantly, for this script to work, it requires that each card have the `post` class and that the card container have the `gh-postfeed` class\n*/\n\nlet link = document.querySelector('link[rel=\"next\"]')?.getAttribute('href');\n\n// Fetch and parse next page\nasync function getNextPage(url) {\n    try {\n        const res = await fetch(url);\n        \n        if (!res.ok) {\n            throw new Error('Failed to fetch page')\n        }\n        \n        const nextPageHtml = await res.text();\n        const parser = new DOMParser();\n        const parsed = parser.parseFromString(nextPageHtml, 'text/html');\n        const posts = parsed.querySelectorAll('.post');\n        const nextLink = parsed.querySelector('link[rel=\"next\"]')?.getAttribute('href');\n        \n        return {posts, nextLink}\n\n    } catch (error) {\n        throw new Error(error)\n    }\n}\n\nexport default function infiniteScroll() {\n    \n    if (!link) { return; }\n\n    const options = {\n        // When the last card is within a 150px of the viewport, fetch the next page. This provides a smoother transition between pages \n       rootMargin: '150px',\n    }\n\n    const callback = (entries, observer) => {\n        try {\n            entries.forEach(entry => {\n            \n                if (entry.isIntersecting) {\n                    \n                    if (link) {\n                        getNextPage(link).then(({posts, nextLink}) => {\n                            posts.forEach(post => {\n                                document.querySelector('.gh-postfeed').append(post)\n                            })\n\n                            if (nextLink) {\n                                link = nextLink;\n                                observer.observe(document.querySelector('.post:last-of-type'))\n                            } else {\n                                observer.disconnect()\n                            }\n                        })\n                    }\n                }\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    let observer = new IntersectionObserver(callback, options);\n\n    observer.observe(document.querySelector('.post:last-of-type'))\n\n}","// Toggle the menu open and close when on mobile\nexport default function menuOpen() {\n    const burgerButton = document.querySelector('.gh-burger');\n    burgerButton.addEventListener('click', function () {\n        document.body.classList.toggle('gh-head-open');\n    });\n}","// JavaScript files are compiled and minified during the build process to the assets/built folder. See available scripts in the package.json file.\n\n// Import CSS\nimport \"../css/index.css\";\n\n// Import JS\nimport menuOpen from \"./menuOpen\";\nimport infiniteScroll from \"./infiniteScroll\";\n\n// Dark mode functionality\nfunction initDarkMode() {\n    // Check for saved theme preference or default to light mode\n    const savedTheme = localStorage.getItem('theme') || 'light';\n    document.documentElement.setAttribute('data-theme', savedTheme);\n\n    // Wait for DOM to be ready\n    document.addEventListener('DOMContentLoaded', function() {\n        const toggleButton = document.getElementById('dark-mode-toggle');\n        const toggleIcon = toggleButton ? toggleButton.querySelector('.toggle-icon') : null;\n\n        if (toggleButton && toggleIcon) {\n            // Update button to match current theme\n            toggleIcon.textContent = savedTheme === 'dark' ? '☀' : '☽';\n            toggleButton.setAttribute('title', savedTheme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode');\n\n            // Add click event listener\n            toggleButton.addEventListener('click', function() {\n                const currentTheme = document.documentElement.getAttribute('data-theme');\n                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n                document.documentElement.setAttribute('data-theme', newTheme);\n                localStorage.setItem('theme', newTheme);\n                toggleIcon.textContent = newTheme === 'dark' ? '☀' : '☽';\n                toggleButton.setAttribute('title', newTheme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode');\n            });\n        }\n    });\n}\n\n\n// Subscribe button feedback functionality\nfunction initSubscribeButtons() {\n    // Function to add button feedback\n    function addButtonFeedback(button) {\n        console.log('Adding feedback to button:', button);\n\n        // Add loading state\n        button.classList.add('loading');\n        button.disabled = true;\n\n        console.log('Button classes after loading:', button.classList.toString());\n\n        // Simulate loading time\n        setTimeout(() => {\n            button.classList.remove('loading');\n            button.classList.add('success');\n            button.disabled = false;\n\n            console.log('Button classes after success:', button.classList.toString());\n\n            // Reset after 3 seconds\n            setTimeout(() => {\n                button.classList.remove('success');\n                console.log('Button reset, classes:', button.classList.toString());\n            }, 3000);\n        }, 1500);\n    }\n\n    // Wait for DOM to be ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initButtons);\n    } else {\n        initButtons();\n    }\n\n    function initButtons() {\n        console.log('Initializing subscribe buttons...');\n\n        // Handle all subscribe buttons with delegation\n        document.addEventListener('click', function(e) {\n            const button = e.target;\n\n            // Check if clicked element is a subscribe button\n            if (button.matches('.subscribe-button, .newsletter-button') ||\n                button.matches('.sidebar-newsletter-form button[type=\"submit\"]') ||\n                button.matches('[data-members-form] button[type=\"submit\"]')) {\n\n                console.log('Subscribe button clicked:', button);\n\n                // Prevent double-processing\n                if (button.classList.contains('loading') || button.classList.contains('success')) {\n                    return;\n                }\n\n                addButtonFeedback(button);\n            }\n        });\n\n        // Also handle form submissions\n        document.addEventListener('submit', function(e) {\n            if (e.target.matches('[data-members-form]')) {\n                const submitButton = e.target.querySelector('button[type=\"submit\"]');\n                if (submitButton && !submitButton.classList.contains('loading')) {\n                    console.log('Form submitted, adding feedback to button:', submitButton);\n                    addButtonFeedback(submitButton);\n                }\n            }\n        });\n\n        console.log('Subscribe button initialization complete');\n    }\n}\n\n// Call the functions\nmenuOpen();\ninfiniteScroll();\ninitDarkMode();\ninitSubscribeButtons();"],"names":["link","document","querySelector","getAttribute","addEventListener","body","classList","toggle","IntersectionObserver","callback","entries","observer","forEach","entry","isIntersecting","async","url","res","fetch","ok","Error","nextPageHtml","text","parsed","DOMParser","parseFromString","posts","querySelectorAll","nextLink","error","getNextPage","then","_ref","post","append","observe","disconnect","console","log","rootMargin","infiniteScroll","savedTheme","localStorage","getItem","documentElement","setAttribute","toggleButton","getElementById","toggleIcon","textContent","newTheme","setItem","initDarkMode","addButtonFeedback","button","add","disabled","toString","setTimeout","remove","initButtons","e","target","matches","contains","submitButton","readyState","initSubscribeButtons"],"mappings":"yBAMA,IAAIA,EAAOC,SAASC,cAAc,qBAAqBC,aAAa,QCJ3CF,SAASC,cAAc,cAC/BE,iBAAiB,SAAS,WACnCH,SAASI,KAAKC,UAAUC,OAAO,eACnC,IDyBW,WAEX,IAAKP,EAAQ,OAkCE,IAAIQ,sBA3BFC,CAACC,EAASC,KACvB,IACID,EAAQE,SAAQC,IAERA,EAAMC,gBAEFd,GApCxBe,eAA2BC,GACvB,IACI,MAAMC,QAAYC,MAAMF,GAExB,IAAKC,EAAIE,GACL,MAAM,IAAIC,MAAM,wBAGpB,MAAMC,QAAqBJ,EAAIK,OAEzBC,GADS,IAAIC,WACGC,gBAAgBJ,EAAc,aAC9CK,EAAQH,EAAOI,iBAAiB,SAChCC,EAAWL,EAAOrB,cAAc,qBAAqBC,aAAa,QAExE,MAAO,CAACuB,QAAOE,WAElB,CAAC,MAAOC,GACL,MAAM,IAAIT,MAAMS,EACpB,CACJ,CAkBwBC,CAAY9B,GAAM+B,MAAKC,IAAuB,IAAtBN,MAACA,EAAKE,SAAEA,GAASI,EACrCN,EAAMd,SAAQqB,IACVhC,SAASC,cAAc,gBAAgBgC,OAAOD,EAAK,IAGnDL,GACA5B,EAAO4B,EACPjB,EAASwB,QAAQlC,SAASC,cAAc,wBAExCS,EAASyB,YACb,GAGZ,GAEP,CAAC,MAAOP,GACLQ,QAAQC,IAAIT,EAChB,IA7BY,CAEbU,WAAY,UAgCNJ,QAAQlC,SAASC,cAAc,sBAE5C,CE6CAsC,GAzGA,WAEI,MAAMC,EAAaC,aAAaC,QAAQ,UAAY,QACpD1C,SAAS2C,gBAAgBC,aAAa,aAAcJ,GAGpDxC,SAASG,iBAAiB,oBAAoB,WAC1C,MAAM0C,EAAe7C,SAAS8C,eAAe,oBACvCC,EAAaF,EAAeA,EAAa5C,cAAc,gBAAkB,KAE3E4C,GAAgBE,IAEhBA,EAAWC,YAA6B,SAAfR,EAAwB,IAAM,IACvDK,EAAaD,aAAa,QAAwB,SAAfJ,EAAwB,uBAAyB,uBAGpFK,EAAa1C,iBAAiB,SAAS,WACnC,MACM8C,EAA4B,SADbjD,SAAS2C,gBAAgBzC,aAAa,cAChB,QAAU,OAErDF,SAAS2C,gBAAgBC,aAAa,aAAcK,GACpDR,aAAaS,QAAQ,QAASD,GAC9BF,EAAWC,YAA2B,SAAbC,EAAsB,IAAM,IACrDJ,EAAaD,aAAa,QAAsB,SAAbK,EAAsB,uBAAyB,sBACtF,IAER,GACJ,CA+EAE,GA3EA,WAEI,SAASC,EAAkBC,GACvBjB,QAAQC,IAAI,6BAA8BgB,GAG1CA,EAAOhD,UAAUiD,IAAI,WACrBD,EAAOE,UAAW,EAElBnB,QAAQC,IAAI,gCAAiCgB,EAAOhD,UAAUmD,YAG9DC,YAAW,KACPJ,EAAOhD,UAAUqD,OAAO,WACxBL,EAAOhD,UAAUiD,IAAI,WACrBD,EAAOE,UAAW,EAElBnB,QAAQC,IAAI,gCAAiCgB,EAAOhD,UAAUmD,YAG9DC,YAAW,KACPJ,EAAOhD,UAAUqD,OAAO,WACxBtB,QAAQC,IAAI,yBAA0BgB,EAAOhD,UAAUmD,WAAW,GACnE,IAAK,GACT,KACP,CASA,SAASG,IACLvB,QAAQC,IAAI,qCAGZrC,SAASG,iBAAiB,SAAS,SAASyD,GACxC,MAAMP,EAASO,EAAEC,OAGjB,GAAIR,EAAOS,QAAQ,0CACfT,EAAOS,QAAQ,mDACfT,EAAOS,QAAQ,6CAA8C,CAK7D,GAHA1B,QAAQC,IAAI,4BAA6BgB,GAGrCA,EAAOhD,UAAU0D,SAAS,YAAcV,EAAOhD,UAAU0D,SAAS,WAClE,OAGJX,EAAkBC,EACtB,CACJ,IAGArD,SAASG,iBAAiB,UAAU,SAASyD,GACzC,GAAIA,EAAEC,OAAOC,QAAQ,uBAAwB,CACzC,MAAME,EAAeJ,EAAEC,OAAO5D,cAAc,yBACxC+D,IAAiBA,EAAa3D,UAAU0D,SAAS,aACjD3B,QAAQC,IAAI,6CAA8C2B,GAC1DZ,EAAkBY,GAE1B,CACJ,IAEA5B,QAAQC,IAAI,2CAChB,CAzC4B,YAAxBrC,SAASiE,WACTjE,SAASG,iBAAiB,mBAAoBwD,GAE9CA,GAuCR,CAMAO"}